image: us-central1-docker.pkg.dev/cloudkite-infra-ops/cloudkite-docker-images/example-image
tag: example_tag

enableConfigMap: true
  ## Use if deploying on the GKE spot nodes (e.g. for NAP)
  # nodeType: spot
labels:
  label1: somevalue
  label2: anothervalue

ingress:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^(/api)(.*) $2 break;
  hosts:
    - test.dev.cloudkite.com
    - other.domain.name.com
  paths:
    - path: /
      pathType: Prefix
      servicePort: 5000
      serviceName: cloudkite-app-1
    - path: /api
      pathType: Prefix
      servicePort: 3003
      serviceName: cloudkite-app-2

serviceAccounts:
  vendor-portal:
    annotations:
      iam.gke.io/gcp-service-account: vendor-portal@tr-dev-361214.iam.gserviceaccount.com
  sunday-sync:
    annotations:
      iam.gke.io/gcp-service-account: sunday-sync@tr-demo-361215.iam.gserviceaccount.com

apps:
  cloudkite-app-1:
    image: us-central1-docker.pkg.dev/cloudkite-infra-ops/cloudkite-docker-images/app-1
    tag: tag-1
    imagePullPolicy: None
    hpa:
      maxReplicas: 3
      minReplicas: 2
      cpuTarget: 50
      memoryTarget: 95
    service:
      name: tcp
      type: ClusterIP
      port: 5000
      targetPort: 5000
      protocol: TCP
    readinessProbe:
      httpGet:
        path: /healthcheck
        port: 3001
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 300m
        memory: 1Gi
    env:
      ENV1: foo
      ENV2: bar

  # cloudkite-app-2:
  #   serviceAccount: cloudkite
  #   vpa:
  #     mode: Auto
  #     ## You can specify resources gap for VPA
  #     # resources:
  #     #   minAllowed:
  #     #     memory: 2Gi
  #     #   maxAllowed:
  #     #     memory: 4Gi
  #   # rollout: true
  #   service:
  #     name: tcp
  #     type: ClusterIP
  #     port: 3003
  #     targetPort: 3003
  #     protocol: TCP
  #   resources:
  #     limits:
  #       memory: 1Gi
  #     requests:
  #       cpu: 150m
  #       memory: 1Gi
  #   env:
  #     ENV1: default
  #   secrets:
  #     - MONGO_URL
  #     - REDISCLOUD_URL
  #     - DATABASE_URL

externalSecret:
  ## Hashicorp Vault
  # secretStoreName: example-name
  # type: vault
  # refreshInterval: 15s
  # secretPath: example-path

  # Google Secret Manager
  secretStoreName: example-name
  type: gcp
  refreshInterval: 15s

secrets:
  - AWS_ACCESS_KEY_ID
  - AWS_SECRET_ACCESS_KEY
  - AWS_LOCATION
  
  # TODO: add AWS Secrets Manager

cronjobs:
  cronjobexample-1:
    schedule: 0 6 * * *
    containers:
      cronjobexample-1:
        args: ["node", "bin/updatereviewsfromproducts.js"]
        resources:
          requests:
            memory: 0.5Gi
          limits:
            memory: 0.5Gi
        

  cronjobexample-2:
    schedule: 0 3 * * 0
    serviceAccount: cronjobexample-2
    image: asdasd
    tag: 1.0
    volumes: 
      - name: db-backups
        mountPath: /db-backups
        type:
          emptyDir: {}
      - name: my-configmap-volume
        mountPath: /etc/scripts
        type:
          configMap:
            name: db-backups-scripts
        configMapData:
          test_script.sh: '{{ .Files.Get "scripts/test_script.sh" | nindent 4 }}'
        

    initContainers:
      exampleinitcontainer-1:
        image: google/cloud-sdk
        command: ["/bin/sh", "-c"]
        args:
          - /etc/scripts/script1.sh
        secrets:
          - SOURCE_PROJECT_ID
          - SOURCE_INSTANCE_ID
      exampleinitcontainer-2:
        image: asdasd
        args: 
          - gsutil 
          - cp 
          - -r
          - gs://cloudkite-bucket/path
          - /db-backups/

    containers:
      examplecontainer:
        image: us-central1-docker.pkg.dev/cloudkite-infra-ops/cloudkite-docker-images/cloudkite
        tag: stage
        command: ["/bin/sh", "-c"]
        args: ["node", "example_app.js"]
        secrets:
          - MONGO_URL
          - POSTGRES_URL