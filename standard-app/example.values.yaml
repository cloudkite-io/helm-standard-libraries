image: us-central1-docker.pkg.dev/cloudkite-infra-ops/cloudkite-docker-images/example-image
tag: example_tag

  ## Use if deploying on the GKE spot nodes (e.g. for NAP)
  # nodeType: spot
labels:
  label1: somevalue
  label2: anothervalue

ingress:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^(/api)(.*) $2 break;
  hosts:
    - test.dev.someorg.com
    - other.domain.name.com
  paths:
    - path: /
      pathType: Prefix
      servicePort: 5000
      serviceName: cloudkite-app-1
    - path: /api
      pathType: Prefix
      servicePort: 3003
      serviceName: cloudkite-app-2

env:
  GLOBAL_ENV1: value1
  GLOBAL_ENV2: value2

serviceAccounts:
  app-1:
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/ASSUME_ROLE_NAME
  app-2:
    annotations:
      iam.gke.io/gcp-service-account: GOOGLE_SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com

apps:
  # you can specify init containers and containers for each deployment for a fine tuning (example-app-1), or use a simplified version in case you only need one container (example-app-2)
  # you can specify parameters on multiple levels: 
  #     * global (env, secrets)
  #     * app/deployment and container/initcontainer (env, secrets, service, redinessProbe, resources)
  example-app-1:
    initContainers:
      exampleinitcontainer-1:
        image: google/cloud-sdk
        command: ["/bin/sh", "-c"]
        args:
          - /etc/scripts/script1.sh
        secrets:
          - secretKey: SOURCE_PROJECT_ID
    containers:
      example-container-1:
        image: us-central1-docker.pkg.dev/cloudkite-infra-ops/cloudkite-docker-images/app-1
        tag: tag-1
        imagePullPolicy: None
        # mpa:
        #   mode: noset
        #   maxReplicas: 12
        #   minReplicas: 3
        #   cpuTarget: 75
        service:
          name: tcp
          type: ClusterIP
          port: 5000
          targetPort: 5000
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /healthcheck
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 5
          timeoutSeconds: 5
        resources:
          limits:
            memory: 1Gi
          requests:
            cpu: 300m
            memory: 1Gi
        env:
          CONTAINER_ENV1: asd
          CONTAINER_ENV2: qwe
    hpa:
      maxReplicas: 3
      minReplicas: 2
      cpuTarget: 50
      # memoryTarget: 95
    env:
      APP_ENV1: foo
      APP_ENV2: bar
    secrets:
      - secretKey: appsettings.json
        property: APPSETTINGS_JSON
      - secretKey: SOURCE_PROJECT_ID
    serviceMonitor:
      interval: 60s # default 30s
      port: metrics
      scrapeTimeout: 10s # default 30s


  example-app-2:
    serviceAccount: cloudkite
    vpa:
      mode: Auto
      ## You can specify resources gap for VPA
      # resources:
      #   minAllowed:
      #     memory: 2Gi
      #   maxAllowed:
      #     memory: 4Gi
    # rollout: true
    service:
      name: tcp
      type: ClusterIP
      port: 3003
      targetPort: 3003
      protocol: TCP
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 150m
        memory: 1Gi
    env:
      ENV1: default
    # secrets:
    #   - MONGO_URL
    #   - REDISCLOUD_URL
    #   - DATABASE_URL

  example-app-3:
    serviceAccount: cloudkite
    vpa:
      mode: Auto
    volumes: 
      - name: static
        mountPath: /static
        type:
          emptyDir: {}
      - name: my-configmap-volume
        mountPath: /etc/scripts
        type:
          configMap:
            name: static-gen-script
            defaultMode: 0777
        configMapData:
          test_script.sh: |
            #!/bin/bash
            DATE=$(date +%d_%m)
  
  example-app-4:
    serviceAccount: cloudkite
    hpa:
      maxReplicas: 3
      minReplicas: 2
      cpuTarget: 80
    pdb:
      minAvailable: 2
    vpa:
      mode: Auto
    volumes: 
      - name: static
        type:
          emptyDir: {}
      - name: scripts
        type:
          configMap:
            name: static-gen-script
            defaultMode: 0777
        configMapData:
          test_script.sh: |
            #!/bin/bash
            DATE=$(date +%d_%m)
    initContainers:
      gen-static:
        command:
          - "/usr/local/bin/scripts/test_script.sh"
        volumes:
          - name: scripts
            mountPath: /usr/local/bin/scripts
          - name: static
            mountPath: /var/static
    containers:
      my-app:
        volumes:
          - name: static
            mountPath: /etc/html/static

externalSecret:
  ## Hashicorp Vault
  # secretStoreName: example-name
  # type: vault
  # refreshInterval: 15s
  # secretPath: example-path

  # Google Secret Manager
  secretStoreName: example-name
  type: gcp
  refreshInterval: 15s

secrets:
  - secretKey: AWS_ACCESS_KEY_ID   # - secretKey: & property: atribute for secrets are applicable to version 0.2.0, version 0.1.0 uses the key id without artribut names e.g (- AWS_ACCESS_KEY_ID)
  - secretKey: AWS_SECRET_ACCESS_KEY

  # TODO: add AWS Secrets Manager

cronjobs:
  cronjobexample-1:
    schedule: 0 6 * * *
    resources:
      requests:
        memory: 0.5Gi
      limits:
        memory: 0.5Gi
    # image: 
      # repository: dasdqw
    containers:
      cronjobexample-1:
        args: ["node", "bin/updatereviewsfromproducts.js"]
        # image:
          # repository: setaer
        

  cronjobexample-2:
    schedule: 0 3 * * 0
    serviceAccount: cronjobexample-2
    image: asdasd
    volumes: 
      - name: db-backups
        mountPath: /db-backups
        type:
          emptyDir: {}
      - name: my-configmap-volume
        mountPath: /etc/scripts
        type:
          configMap:
            name: db-backups-scripts
        configMapData:
          test_script.sh: |
            #!/bin/bash
            DATE=$(date +%d_%m)
    #'{{ .Files.Get "scripts/test_script.sh" | nindent 4 }}' we are currently working on making configMap script data workable from a repo that's not standard library, for now you can use it like this.
        

    initContainers:
      exampleinitcontainer-1:
        image: google/cloud-sdk
        command: ["/bin/sh", "-c"]
        args:
          - /etc/scripts/script1.sh
        secrets:
          - secretKey: SOURCE_PROJECT_ID


      exampleinitcontainer-2:
        image: asdasd
        args: 
          - gsutil 
          - cp 
          - -r
          - gs://cloudkite-bucket/path
          - /db-backups/

    containers:
      examplecontainer:
        image: us-central1-docker.pkg.dev/cloudkite-infra-ops/cloudkite-docker-images/cloudkite
        tag: stage
        command: ["/bin/sh", "-c"]
        args: ["node", "example_app.js"]
        secrets:
          - secretKey: appsettings.json
            property: APPSETTINGS_JSON
          - secretKey: SOURCE_PROJECT_ID
